"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7916],{7143:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(5893),s=t(1151);const i={title:"python\u5b9e\u73b0\u7b80\u5355\u4e0b\u8f7d\u670d\u52a1\u5668",tags:["python","Term"],date:new Date("2017-03-03T20:05:30.000Z"),categories:["Term"]},a=void 0,l={id:"CloudNative/term/py/python\u5b9e\u73b0\u7b80\u5355\u4e0b\u8f7d\u670d\u52a1\u5668",title:"python\u5b9e\u73b0\u7b80\u5355\u4e0b\u8f7d\u670d\u52a1\u5668",description:"0x01 \u7b80\u5355\u4e0b\u8f7d\u529f\u80fd(\u5355\u7ebf\u7a0b)",source:"@site/docs/CloudNative/term/py/python\u5b9e\u73b0\u7b80\u5355\u4e0b\u8f7d\u670d\u52a1\u5668.md",sourceDirName:"CloudNative/term/py",slug:"/CloudNative/term/py/python\u5b9e\u73b0\u7b80\u5355\u4e0b\u8f7d\u670d\u52a1\u5668",permalink:"/docs/CloudNative/term/py/python\u5b9e\u73b0\u7b80\u5355\u4e0b\u8f7d\u670d\u52a1\u5668",draft:!1,unlisted:!1,tags:[{label:"python",permalink:"/docs/tags/python"},{label:"Term",permalink:"/docs/tags/term"}],version:"current",lastUpdatedAt:1709284599,formattedLastUpdatedAt:"Mar 1, 2024",frontMatter:{title:"python\u5b9e\u73b0\u7b80\u5355\u4e0b\u8f7d\u670d\u52a1\u5668",tags:["python","Term"],date:"2017-03-03T20:05:30.000Z",categories:["Term"]},sidebar:"tutorialSidebar",previous:{title:"cheat",permalink:"/docs/CloudNative/term/py/cheat"},next:{title:"rsync",permalink:"/docs/CloudNative/term/rsync"}},o={},d=[{value:"0x01 \u7b80\u5355\u4e0b\u8f7d\u529f\u80fd(\u5355\u7ebf\u7a0b)",id:"0x01-\u7b80\u5355\u4e0b\u8f7d\u529f\u80fd\u5355\u7ebf\u7a0b",level:3},{value:"0x02 \u4e0a\u4f20\u4e0b\u8f7d\u7686\u53ef",id:"0x02-\u4e0a\u4f20\u4e0b\u8f7d\u7686\u53ef",level:3}];function p(e){const n={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"0x01-\u7b80\u5355\u4e0b\u8f7d\u529f\u80fd\u5355\u7ebf\u7a0b",children:"0x01 \u7b80\u5355\u4e0b\u8f7d\u529f\u80fd(\u5355\u7ebf\u7a0b)"}),"\n",(0,r.jsx)(n.p,{children:"\u5728\u6240\u5171\u4eab\u76ee\u5f55\u4e0b\u952e\u5165:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"python -m SimpleHTTPServer 8088\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"\u9ed8\u8ba4\u7aef\u53e3\u53f7\u4e3a 8000"})}),"\n",(0,r.jsx)(n.p,{children:"\u5373\u53ef\u5b9e\u73b0\u7b80\u5355\u4e0b\u8f7d\u529f\u80fd.\u4f46\u662f\u65e0\u4e0a\u4f20\u529f\u80fd"}),"\n",(0,r.jsx)(n.h3,{id:"0x02-\u4e0a\u4f20\u4e0b\u8f7d\u7686\u53ef",children:"0x02 \u4e0a\u4f20\u4e0b\u8f7d\u7686\u53ef"}),"\n",(0,r.jsx)(n.p,{children:"\u4e8e\u662f\u589e\u52a0\u4e0a\u4f20\u529f\u80fd"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python\n\n"""Simple HTTP Server With Upload.\nhttps://github.com/tualatrix/tools/blob/master/SimpleHTTPServerWithUpload.py\nThis module builds on BaseHTTPServer by implementing the standard GET\nand HEAD requests in a fairly straightforward manner.\n"""\n\n**\u6ce8\u610f\u5728\u9632\u706b\u5899\u5f00\u542f\u76f8\u5e94\u7aef\u53e3**\n\n\nimport os\nimport posixpath\nimport BaseHTTPServer\nimport urllib\nimport cgi\nimport shutil\nimport mimetypes\nimport re\n\n__version__ = "0.1"\n__all__ = ["SimpleHTTPRequestHandler"]\n__author__ = "bones7456"\n__home_page__ = "http://li2z.cn/"\n\ntry:\n    from cStringIO import StringIO\nexcept ImportError:\n    from StringIO import StringIO\n\n\nclass SimpleHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):\n\n    """Simple HTTP request handler with GET/HEAD/POST commands.\n    This serves files from the current directory and any of its\n    subdirectories.  The MIME type for files is determined by\n    calling the .guess_type() method. And can reveive file uploaded\n    by client.\n    The GET/HEAD/POST requests are identical except that the HEAD\n    request omits the actual contents of the file.\n    """\n\n    server_version = "SimpleHTTPWithUpload/" + __version__\n\n    def do_GET(self):\n        """Serve a GET request."""\n        f = self.send_head()\n        if f:\n            self.copyfile(f, self.wfile)\n            f.close()\n\n    def do_HEAD(self):\n        """Serve a HEAD request."""\n        f = self.send_head()\n        if f:\n            f.close()\n\n    def do_POST(self):\n        """Serve a POST request."""\n        r, info = self.deal_post_data()\n        print r, info, "by: ", self.client_address\n        f = StringIO()\n        f.write(\'<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\')\n        f.write("<html>\\n<title>Upload Result Page</title>\\n")\n        f.write("<body>\\n<h2>Upload Result Page</h2>\\n")\n        f.write("<hr>\\n")\n        if r:\n            f.write("<strong>Success:</strong>")\n        else:\n            f.write("<strong>Failed:</strong>")\n        f.write(info)\n        f.write("<br><a href=\\"%s\\">back</a>" % self.headers[\'referer\'])\n        f.write("<hr><small>Powered By: bones7456, check new version at ")\n        f.write("<a href=\\"http://li2z.cn/?s=SimpleHTTPServerWithUpload\\">")\n        f.write("here</a>.</small></body>\\n</html>\\n")\n        length = f.tell()\n        f.seek(0)\n        self.send_response(200)\n        self.send_header("Content-type", "text/html")\n        self.send_header("Content-Length", str(length))\n        self.end_headers()\n        if f:\n            self.copyfile(f, self.wfile)\n            f.close()\n\n    def deal_post_data(self):\n        boundary = self.headers.plisttext.split("=")[1]\n        remainbytes = int(self.headers[\'content-length\'])\n        line = self.rfile.readline()\n        remainbytes -= len(line)\n        if boundary not in line:\n            return (False, "Content NOT begin with boundary")\n        line = self.rfile.readline()\n        remainbytes -= len(line)\n        fn = re.findall(r\'Content-Disposition.*name="file"; filename="(.*)"\', line)\n        if not fn:\n            return (False, "Can\'t find out file name...")\n        path = self.translate_path(self.path)\n        fn = os.path.join(path, fn[0])\n        while os.path.exists(fn):\n            fn += "_"\n        line = self.rfile.readline()\n        remainbytes -= len(line)\n        line = self.rfile.readline()\n        remainbytes -= len(line)\n        try:\n            out = open(fn, \'wb\')\n        except IOError:\n            return (False, "Can\'t create file to write, do you have permission to write?")\n\n        preline = self.rfile.readline()\n        remainbytes -= len(preline)\n        while remainbytes > 0:\n            line = self.rfile.readline()\n            remainbytes -= len(line)\n            if boundary in line:\n                preline = preline[0:-1]\n                if preline.endswith(\'\\r\'):\n                    preline = preline[0:-1]\n                out.write(preline)\n                out.close()\n                return (True, "File \'%s\' upload success!" % fn)\n            else:\n                out.write(preline)\n                preline = line\n        return (False, "Unexpect Ends of data.")\n\n    def send_head(self):\n        """Common code for GET and HEAD commands.\n        This sends the response code and MIME headers.\n        Return value is either a file object (which has to be copied\n        to the outputfile by the caller unless the command was HEAD,\n        and must be closed by the caller under all circumstances), or\n        None, in which case the caller has nothing further to do.\n        """\n        path = self.translate_path(self.path)\n        f = None\n        if os.path.isdir(path):\n            if not self.path.endswith(\'/\'):\n                # redirect browser - doing basically what apache does\n                self.send_response(301)\n                self.send_header("Location", self.path + "/")\n                self.end_headers()\n                return None\n            for index in "index.html", "index.htm":\n                index = os.path.join(path, index)\n                if os.path.exists(index):\n                    path = index\n                    break\n            else:\n                return self.list_directory(path)\n        ctype = self.guess_type(path)\n        try:\n            # Always read in binary mode. Opening files in text mode may cause\n            # newline translations, making the actual size of the content\n            # transmitted *less* than the content-length!\n            f = open(path, \'rb\')\n        except IOError:\n            self.send_error(404, "File not found")\n            return None\n        self.send_response(200)\n        self.send_header("Content-type", ctype)\n        fs = os.fstat(f.fileno())\n        self.send_header("Content-Length", str(fs[6]))\n        self.send_header("Last-Modified", self.date_time_string(fs.st_mtime))\n        self.end_headers()\n        return f\n\n    def list_directory(self, path):\n        """Helper to produce a directory listing (absent index.html).\n        Return value is either a file object, or None (indicating an\n        error).  In either case, the headers are sent, making the\n        interface the same as for send_head().\n        """\n        try:\n            list = os.listdir(path)\n        except os.error:\n            self.send_error(404, "No permission to list directory")\n            return None\n        list.sort(key=lambda a: a.lower())\n        f = StringIO()\n        displaypath = cgi.escape(urllib.unquote(self.path))\n        f.write(\'<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\')\n        f.write("<html>\\n<title>Directory listing for %s</title>\\n" % displaypath)\n        f.write("<body>\\n<h2>Directory listing for %s</h2>\\n" % displaypath)\n        f.write("<hr>\\n")\n        f.write("<form ENCTYPE=\\"multipart/form-data\\" method=\\"post\\">")\n        f.write("<input name=\\"file\\" type=\\"file\\"/>")\n        f.write("<input type=\\"submit\\" value=\\"upload\\"/></form>\\n")\n        f.write("<hr>\\n<ul>\\n")\n        for name in list:\n            fullname = os.path.join(path, name)\n            displayname = linkname = name\n            # Append / for directories or @ for symbolic links\n            if os.path.isdir(fullname):\n                displayname = name + "/"\n                linkname = name + "/"\n            if os.path.islink(fullname):\n                displayname = name + "@"\n                # Note: a link to a directory displays with @ and links with /\n            f.write(\'<li><a href="%s">%s</a>\\n\'\n                    % (urllib.quote(linkname), cgi.escape(displayname)))\n        f.write("</ul>\\n<hr>\\n</body>\\n</html>\\n")\n        length = f.tell()\n        f.seek(0)\n        self.send_response(200)\n        self.send_header("Content-type", "text/html")\n        self.send_header("Content-Length", str(length))\n        self.end_headers()\n        return f\n\n    def translate_path(self, path):\n        """Translate a /-separated PATH to the local filename syntax.\n        Components that mean special things to the local file system\n        (e.g. drive or directory names) are ignored.  (XXX They should\n        probably be diagnosed.)\n        """\n        # abandon query parameters\n        path = path.split(\'?\', 1)[0]\n        path = path.split(\'#\', 1)[0]\n        path = posixpath.normpath(urllib.unquote(path))\n        words = path.split(\'/\')\n        words = filter(None, words)\n        path = os.getcwd()\n        for word in words:\n            drive, word = os.path.splitdrive(word)\n            head, word = os.path.split(word)\n            if word in (os.curdir, os.pardir):\n                continue\n            path = os.path.join(path, word)\n        return path\n\n    def copyfile(self, source, outputfile):\n        """Copy all data between two file objects.\n        The SOURCE argument is a file object open for reading\n        (or anything with a read() method) and the DESTINATION\n        argument is a file object open for writing (or\n        anything with a write() method).\n        The only reason for overriding this would be to change\n        the block size or perhaps to replace newlines by CRLF\n        -- note however that this the default server uses this\n        to copy binary data as well.\n        """\n        shutil.copyfileobj(source, outputfile)\n\n    def guess_type(self, path):\n        """Guess the type of a file.\n        Argument is a PATH (a filename).\n        Return value is a string of the form type/subtype,\n        usable for a MIME Content-type header.\n        The default implementation looks the file\'s extension\n        up in the table self.extensions_map, using application/octet-stream\n        as a default; however it would be permissible (if\n        slow) to look inside the data to make a better guess.\n        """\n\n        base, ext = posixpath.splitext(path)\n        if ext in self.extensions_map:\n            return self.extensions_map[ext]\n        ext = ext.lower()\n        if ext in self.extensions_map:\n            return self.extensions_map[ext]\n        else:\n            return self.extensions_map[\'\']\n\n    if not mimetypes.inited:\n        mimetypes.init()  # try to read system mime.types\n    extensions_map = mimetypes.types_map.copy()\n    extensions_map.update({\n        \'\': \'application/octet-stream\',  # Default\n        \'.py\': \'text/plain\',\n        \'.c\': \'text/plain\',\n        \'.h\': \'text/plain\',\n        })\n\n\ndef test(HandlerClass=SimpleHTTPRequestHandler,\n         ServerClass=BaseHTTPServer.HTTPServer):\n    BaseHTTPServer.test(HandlerClass, ServerClass)\n\nif __name__ == \'__main__\':\n    test()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u6765\u81ea",(0,r.jsx)(n.a,{href:"https://github.com/tualatrix/tools/blob/master/SimpleHTTPServerWithUpload.py",children:"Github"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var r=t(7294);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);